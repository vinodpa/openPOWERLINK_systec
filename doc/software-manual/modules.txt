//==============================================================================
//==============================================================================
/**
\defgroup user_layer openPOWERLINK User Layer
*/
//==============================================================================
//==============================================================================

//==============================================================================
/**
\defgroup module_ctrlu User control module (ctrlu)

The user control module is the module responsible for startup and shutdown
of the stack. It communicates whith the kernel control module by its CAL layer.

\see module_ctrlk
\see module_ctrlucal

\ingroup user_layer
*/

//==============================================================================
/**
\defgroup module_ctrlucal User control CAL module (ctrlucal)

The user control CAL module provides the communciation abstraction layer (CAL)
for the user control module to be able to communicate with the kernel stack.
Different CAL module implementations are available:
\li Shared memory block implementation \ref ctrlucal-mem.c
\li Direct call implementation \ref ctrlucal-direct.c

\see module_ctrlu

\ingroup user_layer
*/

//==============================================================================
/**
\defgroup module_errhndu User error handler module (errhndu)

The user error handler module implements the parts of the error handler located
in the user layer. The user layer parts are responsible to synchronize the
error counters and threshold located in the kernel with the appropriate objects
in the object dictionary.

\see module_errhndk
\see module_errhnducal

\ingroup user_layer
*/

//==============================================================================
/**
\defgroup module_errhnducal User error handler CAL module (errhnducal)

This module implements the CAL for the user POWERLINK error handler. It is
responsible for transfer of error handler information with the kernel layer.
There may be different implementations of the CAL layer using different
communication mechanisms.

\see module_errhndu

\ingroup user_layer
*/

//==============================================================================
/**
\defgroup module_eventu User event handler module (eventu)

The user event handler module provides the interface for posting events to
other user and kernel modules. For the receive side it contains a general
receive handler which will be executed when an event is posted to the user
layer. The event handler examines the event and calls the handler of the module
which is specified by the sink argument.

To be independent of a specific event queue implementation it uses its
communication abstraction layer (CAL) for posting and receiving events to/from
different event queues.

\see module_eventucal

\ingroup user_layer
*/

//==============================================================================
/**
\defgroup module_eventucal User event handler CAL module (eventucal)

The user event CAL module builds the interface between the user event
module and the different event queue implementations.

The user event CAL module produces events in the user-to-kernel (U2K) and
user-internal (UInt) queue. It consumes events from the user-internal (UInt)
and the kernel-to-user (K2U) queue.

For each queue a different implementation could be used. The event queue
instances of the used queues and the function interface are stored in the
CALs instance variable.

Which queue implementation is used is configured at compile time by the
following macros:
\li EPL_EVENT_K2U_QUEUE
\li EPL_EVENT_UINT_QUEUE
\li EPL_EVENT_U2K_QUEUE

\see module_eventu

\ingroup user_layer
*/

//==============================================================================
/**
\defgroup module_pdou User layer PDO module (pdou)

The user PDO module is responsible for exchanging process image data with the
application using the process image API. Transmit data will be encoded to the
configured PDOs and transfered to the kernel layer. Receive data will be
received from the kernel layer and transfered to the application using the
process image module.

For communication with the kernel PDO module the user PDO communication
abstraction layer (PDO CAL) is used.

\see module_pdok

\ingroup user_layer
*/

//==============================================================================
/**
\defgroup module_pdoucal User PDO CAL module (pdoucal)

The user PDO CAL module provides the communication abstraction layer (CAL)
for the user PDO module. The CAL module provides a communication mechanism
for the user layer PDO module. Multiple implementations for this communication
could be implemented. Currently the following implementations are available:
\li Shared Buffers - \ref pdoucal-shb.c

\see module_pdou
\see module_pdok
\see module_pdokcal

\ingroup user_layer
*/

//==============================================================================
//==============================================================================
/**
\defgroup kernel_layer openPOWERLINK Kernel Layer
*/
//==============================================================================
//==============================================================================

//==============================================================================
/**
\defgroup module_ctrlk Kernel control module (ctrlk)

The kernel control module is used to for controling the startup and shutdown
of the kernel stack. It will be controled by the user stack and receives its
commands through its communication abstraction layer (CAL). Additionally it
provides status information to the user stack.

\see module_ctrlu
\see module_ctrlkcal

\ingroup kernel_layer
*/

//==============================================================================
/**
\defgroup module_ctrlkcal Kernel control CAL module (ctrlkcal)

The kernel control CAL module provides the communciation abstraction layer (CAL)
for the kernel control module to be able to communicate with the user stack.
Different CAL module implementations are available:
\li Shared memory block implementation \ref ctrlkcal-mem.c
\li Direct call implementation \ref ctrlkcal-direct.c

\see module_ctrlk

\ingroup kernel_layer
*/

//==============================================================================
/**
\defgroup module_errhndk Kernel error handler module (errhndk)

The kernel error handler module implements the POWERLINK error handler. It is
used to manage the POWERLINK error counters.

\see module_errhndu
\see module_errhndkcal

\ingroup kernel_layer
*/

//==============================================================================
/**
\defgroup module_errhndkcal Kernel error handler CAL module (errhndkcal)

This module implements the CAL for the kernel POWERLINK error handler. It is
responsible for transfer of error handler information with the user layer.
There may be different implementations of the CAL layer using different
communication mechanisms.

\see module_errhndk

\ingroup kernel_layer
*/

//==============================================================================
/**
\defgroup module_eventk Kernel event handler module (eventk)

The kernel event handler provides the interface for posting events to other
kernel modules. For the receive side it contains a general receive handler
which will be executed when an event is posted to the kernel layer. The event
handler examines the event and calls the handler of the module which is
specified by the sink argument.

To be independent of a specific event queue implementation it uses its
communication abstraction layer (CAL) for posting and receiving events to/from
different event queues.

\see module_eventkcal

\ingroup kernel_layer
*/

//==============================================================================
/**
\defgroup module_eventkcal Kernel event handler CAL module (eventkcal)

The kernel event CAL module builds the interface between the kernel event
module and the different event queue implementations.

The kernel event CAL module produces events in the kernel-to-user (K2U) and
kernel-internal (KInt) queue. It consumes events from the kernel-internal (KInt)
and the user-to-kernel (U2K) queue.

For each queue a different implementation could be used. The event queue
instances of the used queues and the function interface are stored in the
CALs instance variable.

Which queue implementation is used is configured at compile time by the
following macros:
\li EPL_EVENT_K2U_QUEUE
\li EPL_EVENT_KINT_QUEUE
\li EPL_EVENT_U2K_QUEUE

\see module_eventk

\ingroup kernel_layer
*/


//==============================================================================
/**
\defgroup module_pdok Kernel PDO module (pdok)

The kernel PDO module is module responsible for the handling of process data
objects (PDO) in the openPOWERLINK kernel layer. It is responsible for
communication with the data link layer (DLL) to transfer PDOs on the network.
It communicates with the user layer PDO module through its communication
abstraction layer module (PDO CAL).

\see module_pdou
\see module_pdokcal

\ingroup kernel_layer
*/

//==============================================================================
/**
\defgroup module_pdokcal Kernel PDO CAL module (pdokcal)

The kernel PDO CAL module provides the communication abstraction layer (CAL)
for the kernel PDO module.

\see module_pdou
\see module_pdok

\ingroup kernel_layer
*/

//==============================================================================
//==============================================================================
/**
\defgroup modules_common Common Software Modules
*/
//==============================================================================
//==============================================================================

//==============================================================================
/**
\defgroup module_event Common event handler module (event)

This module provides common functionality for both the user and kernel layer
event modules.

\see module_eventk
\see module_eventu

\ingroup modules_common
*/

//==============================================================================
/**
\defgroup module_eventcal Common event handler CAL module (eventcal)

This module provides common functionality for both the user and kernel layer
event CAL modules.

\see module_eventkcal
\see module_eventucal

\ingroup modules_common
*/

//==============================================================================
/**
\defgroup module_ctrlcal Common control CAL module (ctrlcal)

The module provides common functionality for both the user and kernel layer
control CAL modules.

\see module_ctrlkcal
\see module_ctrlucal

\ingroup modules_common
*/



