################################################################################
#
# \file CMakeLists.txt
#
# \brief cmake file for openPOWERLINK kernel stack (Linux kernel module)
#
# Copyright (c) 2013, SYSTEC electronik GmbH
# Copyright (c) 2013, Bernecker+Rainer Industrie-Elektronik Ges.m.b.H. (B&R)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holders nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
################################################################################

#
# Configure depending selected ethernet driver
#
IF(CFG_POWERLINK_EDRV STREQUAL "8139")

    SET(MODULE_NAME "powerlink8139")
    SET(MODULE_DEFS "${MODULE_DEFS} -DCONFIG_EDRV=8139")
    SET(MODULE_SOURCE_FILES ${MODULE_SOURCE_FILES} ${EDRV_SOURCE_DIR}/edrv-8139.c)

ELSEIF(CFG_POWERLINK_EDRV STREQUAL "82573")

    SET(MODULE_NAME "powerlink82573")
    SET(MODULE_DEFS "${MODULE_DEFS} -DCONFIG_EDRV=82573")
    SET(MODULE_SOURCE_FILES ${MODULE_SOURCE_FILES} ${EDRV_SOURCE_DIR}/edrv-82573.c)

ELSEIF(CFG_POWERLINK_EDRV STREQUAL "8255x")

    SET(MODULE_NAME "powerlink8255x")
    SET(MODULE_DEFS "${MODULE_DEFS} -DCONFIG_EDRV=8255")
    SET(MODULE_SOURCE_FILES ${MODULE_SOURCE_FILES} ${EDRV_SOURCE_DIR}/edrv-8255x.c)

ELSE(CFG_POWERLINK_EDRV STREQUAL "8139")

    message(FATAL_ERROR
            "No valid ethernet driver (8139, 82573, 8255x) was specified in CFG_POWERLINK_EDRV")

ENDIF(CFG_POWERLINK_EDRV STREQUAL "8139")

#
# Configure depending selected mode
#
IF(CFG_POWERLINK_MN)
    SET(MODULE_DEFS "${MODULE_DEFS} -DCONFIG_CFM -DCONFIG_OPENCONFIGURATOR_MAPPING -DCONFIG_MN")
ENDIF(CFG_POWERLINK_MN)

#
# specifiy standard definitions
#
IF(CMAKE_BUILD_TYPE STREQUAL Debug OR CMAKE_BUILD_TYPE STREQUAL DEBUG)
    SET(MODULE_DEFS "${MODULE_DEFS} -D_DEBUG")
    #SET(MODULE_DEFS "${MODULE_DEFS} -D_DBG_TRACE_POINTS_")
    SET(MODULE_DEFS "${MODULE_DEFS} -DDEF_DEBUG_LVL=${CFG_DEBUG_LVL}")
ENDIF(CMAKE_BUILD_TYPE STREQUAL Debug OR CMAKE_BUILD_TYPE STREQUAL DEBUG)

#
# specifiy standard include directories
#
SET(MODULE_INCLUDES "${MODULE_INCLUDES} -I${CMAKE_CURRENT_SOURCE_DIR}")
SET(MODULE_INCLUDES "${MODULE_INCLUDES} -I${POWERLINK_INCLUDE_DIR}")
SET(MODULE_INCLUDES "${MODULE_INCLUDES} -I${LIB_SOURCE_DIR}/circbuf")
SET(MODULE_INCLUDES "${MODULE_INCLUDES} -I${POWERLINK_SOURCE_DIR}")
SET(MODULE_INCLUDES "${MODULE_INCLUDES} -I${KERNEL_SOURCE_DIR}/errhnd")
SET(MODULE_INCLUDES "${MODULE_INCLUDES} -I${STACK_INCLUDE_DIR}/target/linux")

#
# specifiy source files
#
SET(MODULE_SOURCE_FILES
    ${MODULE_SOURCE_FILES}
    ${CMAKE_CURRENT_SOURCE_DIR}/main.c
    ${LIB_SOURCE_DIR}/trace/trace-printk.c
    ${EDRV_SOURCE_DIR}/edrvcyclic.c
    ${KERNEL_SOURCE_DIR}/ctrl/ctrlk.c
    ${KERNEL_SOURCE_DIR}/ctrl/ctrlkcal-linuxkernel.c    
    ${KERNEL_SOURCE_DIR}/dll/dllk.c
    ${KERNEL_SOURCE_DIR}/dll/dllkcal.c
    ${KERNEL_SOURCE_DIR}/dll/dllkcal-linuxkernel.c
    ${KERNEL_SOURCE_DIR}/event/eventk.c
    ${KERNEL_SOURCE_DIR}/event/eventkcal-linuxkernel.c
    ${KERNEL_SOURCE_DIR}/event/eventkcalintf-circbuf.c
    ${COMMON_SOURCE_DIR}/event/event.c
    ${KERNEL_SOURCE_DIR}/nmt/nmtk.c
    ${KERNEL_SOURCE_DIR}/nmt/nmtkcal.c
    ${KERNEL_SOURCE_DIR}/pdo/pdok.c
    ${KERNEL_SOURCE_DIR}/pdo/pdokcal.c
    ${KERNEL_SOURCE_DIR}/pdo/pdokcal-triplebufshm.c
    ${KERNEL_SOURCE_DIR}/pdo/pdokcalmem-linuxkernel.c
    ${KERNEL_SOURCE_DIR}/pdo/pdokcalsync-linuxkernel.c
    ${KERNEL_SOURCE_DIR}/errhnd/errhndk.c
    ${KERNEL_SOURCE_DIR}/errhnd/errhndkcal-local.c
    ${KERNEL_SOURCE_DIR}/veth/veth-linux.c
    ${ARCH_SOURCE_DIR}/linux/SocketLinuxKernel.c
    ${KERNEL_SOURCE_DIR}/hrtimer/hrtimer-linuxkernel.c
    ${LIB_SOURCE_DIR}/circbuf/circbuffer.c
    ${LIB_SOURCE_DIR}/circbuf/circbuf-linuxkernel.c
    ${COMMON_SOURCE_DIR}/debug.c
)

IF (CMAKE_SYSTEM_PROCESSOR STREQUAL x86)
    SET(MODULE_SOURCE_FILES ${MODULE_SOURCE_FILES} ${LIB_SOURCE_DIR}/ami/amix86.c)

ELSEIF (CMAKE_SYSTEM_PROCESSOR STREQUAL arm OR CMAKE_SYSTEM_PROCESSOR STREQUAL armv7l)
   SET(MODULE_SOURCE_FILES ${MODULE_SOURCE_FILES} ${LIB_SOURCE_DIR}/ami/amiarm.c)

ELSEIF (   CMAKE_SYSTEM_PROCESSOR STREQUAL i686 OR CMAKE_SYSTEM_PROCESSOR STREQUAL x86_64)
    SET(MODULE_SOURCE_FILES ${MODULE_SOURCE_FILES} ${LIB_SOURCE_DIR}/ami/amix86.c)

ELSE (CMAKE_SYSTEM_PROCESSOR STREQUAL x86)
    MESSAGE(FATAL_ERROR
            "ami: CMAKE_SYSTEM_PROCESSOR is set to ${CMAKE_SYSTEM_PROCESSOR}. Valid targets are (x86, x86_64, arm, armv7l, i686).")
ENDIF (CMAKE_SYSTEM_PROCESSOR STREQUAL x86)

SET(MODULE_FILE
    ${MODULE_NAME}.ko
)

SET(MODULE_OUTPUT_DIR
    ${CMAKE_CURRENT_BINARY_DIR}
)

IF (CFG_KERNEL_DIR STREQUAL "")
    SET(KERNEL_DIR "/lib/modules/${CMAKE_SYSTEM_VERSION}/build")
ELSE(CFG_KERNEL_DIR STREQUAL "")
    SET(KERNEL_DIR ${CFG_KERNEL_DIR})
ENDIF (CFG_KERNEL_DIR STREQUAL "")

FOREACH(MODULE_SOURCE_FILE ${MODULE_SOURCE_FILES})
    GET_FILENAME_COMPONENT(MODULE_SOURCE_FILENAME ${MODULE_SOURCE_FILE} NAME)
    GET_FILENAME_COMPONENT(MODULE_SOURCE_BASENAME ${MODULE_SOURCE_FILE} NAME_WE)
    ADD_CUSTOM_COMMAND(OUTPUT ${MODULE_OUTPUT_DIR}/src/${MODULE_SOURCE_FILENAME}
                       COMMAND ${CMAKE_COMMAND} -E make_directory ${MODULE_OUTPUT_DIR}/src
                       COMMAND ${CMAKE_COMMAND} -E create_symlink ${MODULE_SOURCE_FILE} ${MODULE_OUTPUT_DIR}/src/${MODULE_SOURCE_FILENAME}
                       )
    SET(MODULE_OBJS "${MODULE_OBJS} src/${MODULE_SOURCE_BASENAME}.o")
    SET(MODULE_LINKED_SOURCE_FILES ${MODULE_LINKED_SOURCE_FILES} ${MODULE_OUTPUT_DIR}/src/${MODULE_SOURCE_FILENAME})
ENDFOREACH(MODULE_SOURCE_FILE)

CONFIGURE_FILE(${TOOLS_DIR}/linux/Kbuild.in ${MODULE_OUTPUT_DIR}/Kbuild)

IF(CMAKE_CROSSCOMPILING)
    IF(DEFINED MAKE_KERNEL_ARCH)
        SET(MAKE_KERNEL_CROSSCOMPILING_PARAMS ARCH=${MAKE_KERNEL_ARCH})
    ENDIF(DEFINED MAKE_KERNEL_ARCH)

    IF(DEFINED MAKE_KERNEL_CROSS_COMPILE)
        SET(MAKE_KERNEL_CROSSCOMPILING_PARAMS
                ${MAKE_KERNEL_CROSSCOMPILING_PARAMS} CROSS_COMPILE=${MAKE_KERNEL_CROSS_COMPILE})
    ENDIF(DEFINED MAKE_KERNEL_CROSS_COMPILE)
ENDIF(CMAKE_CROSSCOMPILING)

ADD_CUSTOM_COMMAND(
    OUTPUT ${MODULE_OUTPUT_DIR}/${MODULE_FILE}
    COMMAND ${CMAKE_MAKE_PROGRAM} ${MAKE_KERNEL_CROSSCOMPILING_PARAMS} -C ${KERNEL_DIR} M=${MODULE_OUTPUT_DIR} modules
    WORKING_DIRECTORY ${MODULE_OUTPUT_DIR}
    DEPENDS ${MODULE_LINKED_SOURCE_FILES} ${TOOLS_DIR}/linux/Kbuild.in
    VERBATIM
)

ADD_CUSTOM_TARGET(
    ${MODULE_NAME}
    ALL
    DEPENDS ${MODULE_OUTPUT_DIR}/${MODULE_FILE}
    )

ADD_CUSTOM_TARGET(
    module_clean
    COMMAND ${CMAKE_MAKE_PROGRAM} -C ${KERNEL_DIR} M=${MODULE_OUTPUT_DIR} clean
    #COMMAND ${CMAKE_COMMAND} -E remove_directory ${MODULE_OUTPUT_DIR}/src
    )

# add installation rules
INSTALL(FILES ${MODULE_OUTPUT_DIR}/${MODULE_NAME}.ko DESTINATION bin)
INSTALL(FILES ${TOOLS_DIR}/linux/50-openPOWERLINK.rules DESTINATION bin)
INSTALL(PROGRAMS ${TOOLS_DIR}/linux/plkload DESTINATION bin)
INSTALL(PROGRAMS ${TOOLS_DIR}/linux/plkunload DESTINATION bin)
INSTALL(PROGRAMS ${TOOLS_DIR}/linux/devices.txt DESTINATION bin)
