#!/bin/bash
#
################################################################################
#  (c) Bernecker + Rainer Industrie-Elektronik Ges.m.b.H.
#      A-5142 Eggelsberg, B&R Strasse 1
#      www.br-automation.com
################################################################################
#
# This script creates the development environment for Altera Nios II Eclipse

source create-this-app.settings

if [ -z "$SOPC_DIR" ]; then
echo "Define path to SOPC file in create-this-app.settings!"
exit 1
fi

if [ -z "$OPT_LEVEL" ]; then
echo "Define optimization level in create-this-app.settings!"
exit 1
fi

if [ -z "$DBG_MODE" ]; then
echo "Define debug mode in create-this-app.settings!"
exit 1
fi

if [ -z "$TC_I_MEM" ]; then
echo "Define tightly-coupled memory in create-this-app.settings!"
exit 1
fi

SOPC_DIR=`readlink -n -f ${SOPC_DIR}`

# export variables needed by create-this-bsp
export SOPC_DIR
export OPT_LEVEL
export DBG_MODE
export TC_I_MEM

# save arguments for passing to create-this-bsp
SAVE_ARGS=$@


# process arguments
SKIP_MAKE=
REBUILD=
while [ $# -gt 0 ]
do
  case "$1" in
      # Don't run make if create-this-app script is called with --no-make arg
      --no-make)
          SKIP_MAKE=1
          ;;
      --rebuild)
          rm -f ./Makefile ${BSP_DIR}/settings.bsp
          REBUILD=1
          ;;
      --help)
          echo "Usage: ${0} [OPTION]"
          echo
          echo "  --rebuild      recreates the Makefile and the BSP"
          echo "  --no-make      do not run make at the end of this script"
          echo
          echo " Configure the script in the file create-this-app.settings"
          echo " according to your needs before running this script!"
          echo
          exit 1
          ;;
  esac
  shift
done

CFLAGS="-D${DBG_MODE} -DDEF_DEBUG_LVL=${DEF_DEBUG_LVL}"

#workaround for global pointer error
APP_CFLAGS_DEFINED_SYMBOLS="-G4"

if [ -n "${COMSPEC}" ]; then
# Under Windows we need double quotes, but not under Linux
INCLUDES=\"${INCLUDES}\"
CFLAGS=\"${CFLAGS}\"
fi

NIOS2_APP_GEN_ARGS="--elf-name epl.elf \
--set OBJDUMP_INCLUDE_SOURCE 1 \
--set CREATE_OBJDUMP 0 \
--set CFLAGS=${CFLAGS} \
--set APP_INCLUDE_DIRS=${INCLUDES} \
--src-files $SRCFILES \
--set APP_CFLAGS_OPTIMIZATION ${OPT_LEVEL}"

# First, check to see if $SOPC_KIT_NIOS2 environmental variable is set.
# This variable is required for the command line tools to execute correctly.
if [ -z $SOPC_KIT_NIOS2 ]
then
    echo Required \$SOPC_KIT_NIOS2 Environmental Variable is not set!
    exit 1
fi

# Also make sure that the APP has not been created already.  Check for
# existence of Makefile in the app directory
if [ -f ./Makefile ]
then
    echo Application has already been created!
    echo Delete Makefile if you want to create a new application makefile
    echo or call this script with parameter --rebuild
    exit 1
fi

echo "Creating application for Quartus project ${SOPC_DIR}"
echo

# We are selecting hal_default bsp because it supports this application.
# Check to see if the hal_default has already been generated by checking for
# existence of the public.mk file.  If not, we need to run
# create-this-bsp file to generate the bsp.
if [ -n "$REBUILD" -o ! -f $BSP_DIR/public.mk ]; then
    # Since BSP doesn't exist, create the BSP
    # Pass any command line arguments passed to this script to the BSP.
    pushd $BSP_DIR >> /dev/null
    ./create-this-bsp $SAVE_ARGS || {
        echo "create-this-bsp failed"
        exit 1
    }
    popd >> /dev/null

    #workaround for linker.x issue
    ./fix-linkerx
fi

# Set TCI memory size
TCIMEM_SIZE=$(nios2-bsp-query-settings --settings $BSP_DIR/settings.bsp --cmd puts [get_addr_span $TC_I_MEM])

if [ -z "$TCIMEM_SIZE" ]; then
    TCIMEM_SIZE=0
fi

NIOS2_APP_GEN_ARGS="${NIOS2_APP_GEN_ARGS} --set APP_CFLAGS_DEFINED_SYMBOLS=${APP_CFLAGS_DEFINED_SYMBOLS} -DALT_TCIMEM_SIZE=${TCIMEM_SIZE}"

cmd="nios2-app-generate-makefile --bsp-dir $BSP_DIR --set QUARTUS_PROJECT_DIR=$SOPC_DIR $NIOS2_APP_GEN_ARGS"

echo "create-this-app: Running \"$cmd\""
$cmd || {
    echo "nios2-app-generate-makefile failed"
    exit 1
}

cat >> Makefile <<'Heredoc'

# Rules for EPCS flash programming commands (EPCS contains SOF and application)
PROGRAM_EPCS_SUFFIX := -epcs
PROGRAM_EPCS_TARGET := $(addsuffix $(PROGRAM_EPCS_SUFFIX), $(FLASH_FILES))

.PHONY : program-epcs
program-epcs : $(PROGRAM_EPCS_TARGET)

SOF_FILE := $(wildcard $(QUARTUS_PROJECT_DIR)/*.sof)

.PHONY : $(PROGRAM_EPCS_TARGET)
$(PROGRAM_EPCS_TARGET) : $(ELF)
    @$(ECHO) Info: Programming $(basename $@).flash
    @if [ -n "$($(basename $@)_EPCS_FLAGS)" ]; \
    then \
        nios2-configure-sof $(DOWNLOAD_CABLE_FLAG) -C $(QUARTUS_PROJECT_DIR); \
        sof2flash --epcs --input=$(SOF_FILE) --output=sof.flash; \
        $(ELF2FLASH) --after=sof.flash --input=$(ELF) --outfile=$(basename $@)_after_sof.flash --sim_optimize=$(SIM_OPTIMIZE) $(elf2flash_extra_args); \
        $(ECHO) $(FLASHPROG) $(SOPC_SYSID_FLAG) --epcs --base=$($(basename $@)_START) sof.flash $(basename $@)_after_sof.flash; \
        $(FLASHPROG) $(DOWNLOAD_CABLE_FLAG) $(SOPC_SYSID_FLAG) --epcs --base=$($(basename $@)_START) -g --override=../generic/nios2-flash-override.txt sof.flash $(basename $@)_after_sof.flash; \
    fi

Heredoc

if [ -z "$SKIP_MAKE" ]; then
    cmd="make"

    echo "create-this-app: Running \"$cmd\""
    $cmd || {
        echo "make failed"
        exit 1
    }

    echo
    echo "To download and run the application:"
    echo "    1. Make sure the board is connected to the system."
    echo "    2. Run 'nios2-configure-sof -C $SOPC_DIR'"
    echo "       to configure the FPGA with the hardware design."
    echo "    3. If you have a stdio device and generated with --debug,"
    echo "       run 'nios2-terminal' in a different shell."
    echo "    4. Run 'make download-elf' from the application directory."
    echo
    echo "To debug the application:"
    echo "    Execute this script with argument --debug"
    echo "    Import the project into Nios II IDE."
    echo "    Refer to Nios II IDE Documentation or Documentation/altera.txt"
    echo "    for more information."
    echo
    echo "To burn FPGA hardware design and application into the serial flash (EPCS):"
    echo "    Run 'make program-epcs' from the application directory."
    echo
    echo -e ""
fi


exit 0
